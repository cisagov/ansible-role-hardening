---
- name: Ensure password creation requirements are configured
  become: yes
  lineinfile:
    path: /etc/security/pwquality.conf
    regexp: "(?i)[^\\s #]*{{ item.name }}"
    line: "{{ item.name }} = {{ item.value }}"
    state: present
  tags:
    - pwquality
    - pam
  loop:
    - { name: "minlen", value: "14"}
    - { name: "dcredit", value: "-1"}
    - { name: "ucredit", value: "-1"}
    - { name: "ocredit", value: "-1"}
    - { name: "lcredit", value: "-1"}

- name: Update pam_pwquality.so rule (RedHat)
  lineinfile:
    path: "/usr/share/authselect/default/sssd/{{ item }}"
    regexp: "(?i)[^\\s ]*password[\\s]*requisite[\\s]*pam_pwquality.so"
    line: "password requisite pam_pwquality.so try_first_pass retry=3 local_users_only"
    state: present
  loop:
    - system-auth
    - password-auth
  when: ansible_os_family == "RedHat"
  become: yes
  tags:
    - system-auth
    - password-auth
    - pam

- name: Enable and configure pam modules (Debian)
  become: yes
  block:
    - name: >
        Add configuration for tally2 module (lockout for failed password
        attempts)
      copy:
        content: |
          Name: Login attempt counter (tally)
          Default: yes
          Priority: 1024
          Auth-Type: Additional
          Auth:
            required pam_tally2.so onerr=fail audit silent deny=5 unlock_time=900
          Auth-Initial:
            required pam_tally2.so onerr=fail audit silent deny=5 unlock_time=900
          Account-Type: Additional
          Account:
            required pam_tally2.so
        dest: /usr/share/pam-configs/tally2
        mode: 0644
      tags:
        - tally2
    - name: Add configuration for pwhistory module (limit password reuse)
      copy:
        content: |
          Name: Pwhistory
          Default: yes
          Priority: 100
          Conflicts: cracklib
          Password-Type: Primary
          Password:
            required pam_pwhistory.so remember=5
          Password-Initial:
            required pam_pwhistory.so remember=5
        dest: /usr/share/pam-configs/pwhistory
        mode: 0644
      tags:
        - pwhistory
    - name: Modify configuration for mkhomedir module (set home directory permissions)
      lineinfile:
        backrefs: yes
        path: /usr/share/pam-configs/mkhomedir
        regex: ^(.*pam_mkhomedir\.so.*)$
        line: \1 umask=0027
      tags:
        - mkhomedir
    - name: Enable all necessary pam modules
      command: >
        /usr/sbin/pam-auth-update --force --enable
        mkhomedir
        pwhistory
        pwquality
        sss
        systemd
        tally2
        unix
  when: ansible_os_family == "Debian"
  tags:
    - pam

# Rather than modify the files in /etc/pam.d, we modify the files used
# by the default "sssd" authselect profile.  This allows our changes
# to persist when authselect is run (e.g. by ipa-client-install).
#
# IMPORTANT:  These changes will only take effect after authselect is run
# and the default "sssd" profile is activated:  authselect select sssd
- name: Ensure lockout for failed password attempts is configured (RedHat)
  block:
    - name: Ensure pam_unix.so rule is present
      lineinfile:
        path: "/usr/share/authselect/default/sssd/{{ item }}"
        regexp: "(?i)[^\\s ]*auth[\\s]*sufficient[\\s]*pam_unix.so"
        line: "auth sufficient pam_unix.so {if not \"without-nullok\":nullok} try_first_pass"
        state: present
        insertbefore: "(?i)[^\\s ]*auth[\\s]*required[\\s]*pam_faillock.so"
      loop:
        - system-auth
        - password-auth
        - fingerprint-auth
        - smartcard-auth
    - name: Update pam_faillock.so preauth rule
      lineinfile:
        path: "/usr/share/authselect/default/sssd/{{ item }}"
        regexp: "(?i)[^\\s ]*auth[\\s]*required[\\s]*pam_faillock.so[\\s]*preauth"
        line: "auth required pam_faillock.so preauth audit silent deny=5 unlock_time=900 {include if \"with-faillock\"}"
        state: present
        insertbefore: "(?i)[^\\s ]*auth[\\s]*sufficient[\\s]*pam_unix.so"
      loop:
        - system-auth
        - password-auth
        - fingerprint-auth
        - smartcard-auth
    - name: Add pam_tally2.so rule
      lineinfile:
        path: "/usr/share/authselect/default/sssd/{{ item }}"
        regexp: "(?i)[^\\s ]*auth[\\s]*required[\\s]*pam_tally2.so"
        line: "auth required pam_tally2.so onerr=fail audit silent deny=5 unlock_time=900"
        state: present
        insertbefore: "(?i)[^\\s ]*auth[\\s]*required[\\s]*pam_faillock.so[\\s]*preauth"
      loop:
        - system-auth
        - password-auth
        - fingerprint-auth
        - smartcard-auth
    - name: Add pam_faillock.so authfail rule
      lineinfile:
        path: "/usr/share/authselect/default/sssd/{{ item }}"
        regexp: "(?i)[^\\s ]*auth[\\s]*\\[default=die\\][\\s]*pam_faillock.so"
        line: "auth [default=die] pam_faillock.so authfail audit deny=5 unlock_time=900 {include if \"with-faillock\"}"
        state: present
        insertafter: "(?i)[^\\s ]*auth[\\s]*sufficient[\\s]*pam_unix.so"
      loop:
        - system-auth
        - password-auth
        - fingerprint-auth
        - smartcard-auth
    - name: Add pam_faillock.so authsucc rule
      lineinfile:
        path: "/usr/share/authselect/default/sssd/{{ item }}"
        regexp: "(?i)[^\\s ]*auth[\\s]*sufficient[\\s]*pam_faillock.so"
        line: "auth sufficient pam_faillock.so authsucc audit deny=5 unlock_time=900 {include if \"with-faillock\"}"
        state: present
        insertafter: "(?i)[^\\s ]*auth[\\s]*\\[default=die\\][\\s]*pam_faillock.so"
      loop:
        - system-auth
        - password-auth
        - fingerprint-auth
        - smartcard-auth
    - name: Add options to authselect.conf
      lineinfile:
        path: /etc/authselect/authselect.conf
        regexp: "^{{ item }}"
        line: "{{ item }}"
        state: present
      loop:
        - with-faillock
        - with-fingerprint
        - with-smartcard
  when: ansible_os_family == "RedHat"
  become: yes
  tags:
    - system-auth
    - password-auth
    - fingerprint-auth
    - smartcard-auth
    - pam

- name: Ensure password reuse is limited and password hashing algorithm is SHA-512 (RedHat)
  block:
    - name: Update pam_unix.so rule
      lineinfile:
        path: "/usr/share/authselect/default/sssd/{{ item }}"
        regexp: "(?i)[^\\s ]*password[\\s]*sufficient[\\s]*pam_unix.so"
        line: "password sufficient pam_unix.so remember=5 sha512 shadow {if not \"without-nullok\":nullok} try_first_pass use_authtok"
        state: present
        insertbefore: "(?i)[^\\s ]*password[\\s]*required[\\s]*pam_deny.so"
      loop:
        - system-auth
        - password-auth
    - name: Add pam_pwhistory.so rule
      lineinfile:
        path: /usr/share/authselect/default/sssd/system-auth
        regexp: "(?i)[^\\s ]*password[\\s]*required[\\s]*pam_pwhistory.so"
        line: "password required pam_pwhistory.so remember=5"
        state: present
        insertbefore: "(?i)[^\\s ]*password[\\s]*sufficient[\\s]*pam_unix.so"
  when: ansible_os_family == "RedHat"
  become: yes
  tags:
    - system-auth
    - pam

- name: Modify configuration for mkhomedir module (set home directory permissions) (RedHat)
  lineinfile:
    path: "/usr/share/authselect/default/sssd/{{ item }}"
    regexp: "(?i)[^\\s ]*session[\\s]*optional[\\s]*pam_oddjob_mkhomedir.so"
    line: "session optional pam_oddjob_mkhomedir.so umask=0027 {include if \"with-mkhomedir\"}"
    state: present
  loop:
    - system-auth
    - password-auth
    - fingerprint-auth
    - smartcard-auth
  when: ansible_os_family == "RedHat"
  become: yes
  tags:
    - system-auth
    - password-auth
    - fingerprint-auth
    - smartcard-auth
    - pam
...
