---
- name: Ensure password creation requirements are configured
  become: "yes"
  lineinfile:
    path: /etc/security/pwquality.conf
    regexp: "(?i)[^\\s #]*{{ item.name }}"
    line: "{{ item.name }} = {{ item.value }}"
    state: present
  tags:
    - pwquality
    - pam
  loop:
    - { name: "minlen", value: "14"}
    - { name: "dcredit", value: "-1"}
    - { name: "ucredit", value: "-1"}
    - { name: "ocredit", value: "-1"}
    - { name: "lcredit", value: "-1"}

- name: Ensure all necessary pam modules are configured (Debian)
  become: yes
  block:
    - name: Enable all necessary pam modules
      command: /usr/sbin/pam-auth-update --force --enable {{ item }}
      loop:
        - mkhomedir
        - pwquality
        - pwhistory
        - sss
        - systemd
        - tally2
        - unix
  when: ansible_os_family == "Debian"
  tags:
    - pam

- name: Ensure lockout for failed password attempts is configured (Debian)
  become: yes
  block:
    - name: Add configuration for tally2 module
      copy:
        content: |
          Name: Login attempt counter (tally)
          Default: yes
          Priority: 1024
          Auth-Type: Additional
          Auth:
            required pam_tally2.so onerr=fail audit silent deny=5 unlock_time=900
          Auth-Initial:
            required pam_tally2.so onerr=fail audit silent deny=5 unlock_time=900
        dest: /usr/share/pam-configs/tally2
        mode: 0644
    - name: Enable tally2 pam module
      command: /usr/sbin/pam-auth-update --force --enable tally2
  when: ansible_os_family == "Debian"
  tags:
    - pam

- name: Ensure lockout for failed password attempts is configured (RedHat)
  block:
    - name: Remove pam_unix.so arguments
      pamd:
        name: "{{ item }}"
        type: auth
        control: sufficient
        module_path: pam_unix.so
        module_arguments: "nullok try_first_pass"
        state: args_absent
      loop:
        - system-auth
        - password-auth
    - name: Ensure pam_unix.so rule is present
      lineinfile:
        path: "/etc/pam.d/{{ item }}"
        regexp: "(?i)[^\\s ]*auth[\\s]*sufficient[\\s]*pam_unix.so"
        line: "auth sufficient pam_unix.so"
        state: present
      loop:
        - fingerprint-auth
        - smartcard-auth
    - name: Add pam_faillock.so preauth rule
      pamd:
        name: "{{ item }}"
        new_type: auth
        new_control: required
        new_module_path: pam_faillock.so
        module_arguments: "preauth audit silent deny=5 unlock_time=900"
        type: auth
        control: sufficient
        module_path: pam_unix.so
        state: before
      loop:
        - system-auth
        - password-auth
        - fingerprint-auth
        - smartcard-auth
    - name: Add pam_tally2.so rule
      pamd:
        name: "{{ item }}"
        new_type: auth
        new_control: required
        new_module_path: pam_tally2.so
        module_arguments: "onerr=fail audit silent deny=5 unlock_time=900"
        type: auth
        control: required
        module_path: pam_faillock.so
        state: before
      loop:
        - system-auth
        - password-auth
        - fingerprint-auth
        - smartcard-auth
    - name: Add pam_faillock.so authfail rule
      pamd:
        name: "{{ item }}"
        new_type: auth
        new_control: "[default=die]"
        new_module_path: pam_faillock.so
        module_arguments: "authfail audit deny=5 unlock_time=900"
        type: auth
        control: sufficient
        module_path: pam_unix.so
        state: after
      loop:
        - system-auth
        - password-auth
        - fingerprint-auth
        - smartcard-auth
    - name: Add pam_faillock.so authsucc rule
      pamd:
        name: "{{ item }}"
        new_type: auth
        new_control: sufficient
        new_module_path: pam_faillock.so
        module_arguments: "authsucc audit deny=5 unlock_time=900"
        type: auth
        control: "[default=die]"
        module_path: pam_faillock.so
        state: after
      loop:
        - system-auth
        - password-auth
        - fingerprint-auth
        - smartcard-auth
  when: ansible_os_family == "RedHat"
  become: "yes"
  tags:
    - system-auth
    - password-auth
    - fingerprint-auth
    - smartcard-auth
    - pam

- name: Ensure password reuse is limited (Debian)
  become: yes
  block:
    - name: Add configuration for pwhistory module
      copy:
        content: |
          Name: Pwhistory
          Default: yes
          Priority: 100
          Conflicts: cracklib
          Password-Type: Primary
          Password:
            requisite pam_pwhistory.so remember=5
          Password-Initial:
            requisite pam_pwhistory.so remember=5
        dest: /usr/share/pam-configs/pwhistory
        mode: 0644
    - name: Enable pwhistory pam module
      command: /usr/sbin/pam-auth-update --force --enable pwhistory
  when: ansible_os_family == "Debian"
  tags:
    - pam

- name: Ensure password reuse is limited (RedHat)
  block:
    - name: Add pam_pwhistory.so rule
      pamd:
        name: system-auth
        new_type: password
        new_control: required
        new_module_path: pam_pwhistory.so
        module_arguments: "remember=5"
        type: password
        control: required
        module_path: pam_deny.so
        state: before
    - name: Update pam_unix.so rule
      pamd:
        name: system-auth
        module_arguments: "remember=5"
        type: password
        control: sufficient
        module_path: pam_unix.so
        state: args_present
  when: ansible_os_family == "RedHat"
  become: "yes"
  tags:
    - system-auth
    - pam

- name: Ensure password hashing algorithm is SHA-512 (RedHat)
  pamd:
    name: "{{ item }}"
    type: password
    control: sufficient
    module_path: pam_unix.so
    module_arguments: "sha512"
    state: args_present
  loop:
    - system-auth
    - password-auth
  when: ansible_os_family == "RedHat"
  become: "yes"
  tags:
    - system-auth
    - password-auth
    - pam
...
